/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * World.java
 *
 * Created on 01/11/2010, 00:28:47
 */
package gui;

import util.Line;
import util.Line2;
import util.ObjectsControl;
import util.Obstacle;
import util.VisibilityGraph;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import java.util.ArrayList;

/**
 *
 * @author Lucas
 */
public class World extends javax.swing.JPanel {
    ObjectsControl objectsControl;
    VisibilityGraph visibilityGraph;

    /** Creates new form World */
    public World() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        Obstacle currentObstacle = objectsControl.getCurrentObstacle();

        Graphics2D g2 = (Graphics2D)g;

        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        currentObstacle.drawCurrentLine(g2);
        currentObstacle.drawTempObstacle(g2);

        ArrayList<Obstacle> obstacles = objectsControl.getObstacles();
        for (int i = 0; i < obstacles.size(); i++) {
            Obstacle obstacle = obstacles.get(i);
            
            obstacle.drawObstacle(g2);
            

            if(objectsControl.isExpandedObjects()){
                g2.setColor(Color.LIGHT_GRAY);
                obstacle.drawTempObstacle(g2);
                g2.setColor(Color.RED);
                obstacle.drawPoints(g2);
                g2.setColor(Color.BLACK);
                
            }
        }

        if((objectsControl.getpStart().x != 0) && (objectsControl.getpStart().y != 0)){
            //g2.drawString(objectsControl.getpStart().toString(), objectsControl.getpStart().x, objectsControl.getpStart().y);
            g2.setColor(Color.BLUE);
            g2.fillOval(objectsControl.getpStart().x-3, objectsControl.getpStart().y-3, 7, 7);
        }

         if((objectsControl.getpEnd().x != 0) && (objectsControl.getpEnd().y != 0)){
            //g2.drawString(objectsControl.getpEnd().toString(), objectsControl.getpEnd().x, objectsControl.getpEnd().y);
            g2.setColor(Color.RED);
            g2.fillOval(objectsControl.getpEnd().x-3, objectsControl.getpEnd().y-3, 7, 7);
        }

        if(visibilityGraph.getListOfLines().size() > 0){
           ArrayList<Line2D> lines = visibilityGraph.getListOfLines();
            for (int i = 0; i < lines.size(); i++) {
                Line2D line2 = lines.get(i);
//                g.setColor(Color.ORANGE);
//                g.drawString(Integer.toString(i), (int)((line2D.getX1() + line2D.getX2())/2),
//                            (int)(line2D.getY1() + line2D.getY2())/2);
                g.setColor(Color.GREEN);
                g.drawLine((int) line2.getX1(), (int) line2.getY1(),
                    (int) line2.getX2(), (int) line2.getY2());
            }
        }

        if(visibilityGraph.getListOfLines().size() > 0){
            ArrayList<Line2D> lines = visibilityGraph.getBestWay();
            for (int i = 0; i < lines.size(); i++) {
                Line2D line2 = lines.get(i);
//                g.setColor(Color.ORANGE);
//                g.drawString(Integer.toString(i), (int)((line2D.getX1() + line2D.getX2())/2),
//                            (int)(line2D.getY1() + line2D.getY2())/2);
                g.setColor(Color.BLUE);
                g.drawLine((int) line2.getX1(), (int) line2.getY1(),
                    (int) line2.getX2(), (int) line2.getY2());
            } 
        }
    }

    public void setObjectsControl(ObjectsControl objectsControl) {
        this.objectsControl = objectsControl;
    }

    public void setVisibilityGraph(VisibilityGraph visibilityGraph) {
        this.visibilityGraph = visibilityGraph;
    }

    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
